#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <math.h>
using namespace std;

const int Nr = 10;  // round number,10 for AES-128 
const int Nk = 4;   // the word size of cipher key 
byte S_Box[16][16] = {  
	{0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
	{0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
	{0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
	{0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
	{0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
	{0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
	{0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
	{0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
	{0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
	{0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
	{0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
	{0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
	{0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
	{0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
	{0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
	{0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
};  
byte Inv_S_Box[16][16] = {  
    {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},  
    {0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},  
    {0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},  
    {0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},  
    {0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},  
    {0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},  
    {0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},  
    {0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},  
    {0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},  
    {0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},  
    {0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},  
    {0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},  
    {0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},  
    {0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},  
    {0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},  
    {0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}  
};
/*
*round config
*/
int Rcon[10] = {0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
                 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000};


/** 
 *  对输入word中的每一个字节进行S-盒变换 
 */  
int SubWord(int sw)  
{  
    int temp;  
    for(int i=0; i<32; i+=8)  
    {  
        int row = sw[i+7]*8 + sw[i+6]*4 + sw[i+5]*2 + sw[i+4];  
        int col = sw[i+3]*8 + sw[i+2]*4 + sw[i+1]*2 + sw[i];  
        byte val = S_Box[row][col];  
        for(int j=0; j<8; ++j)  
            temp[i+j] = val[j];  
    }  
    return temp;  
} 

/**** 
 * Multiply two numbers under polynomial GF(2^8). 
 * @return: The product of @param a and @param b. 
 */  
 

unsigned char mul(unsigned char a, unsigned char b)  
{  
	unsigned char ret = 0;  
	for (int i = 0; i < 8; ++i)//循环累加b的每1位
	{
		if (b & 0x01)     
			ret ^= a;
		if (a & 0x80)
		{  
			a <<= 1; //a先左移1位
			a ^= 0x1B; //再异或0x1B
		} else
			a <<= 1;  //,等于直接左移1位
		b >>= 1;//取b的高1位
	}
	return ret;
} 
#if 0
int shiftRow(int shiftArr[4][4])
{
	int temp,temp2 ;
	temp=shiftArr[1][0];
	shiftArr[1][0]=shiftArr[1][1];shiftArr[1][1]=shiftArr[1][2];shiftArr[1][2]=shiftArrE[1][3];shiftArr[1][3]=temp;//the second row circle shift left 1 byte
	temp=shiftArr[2][0],temp2=shiftArr[2][1];
	shiftArr[2][0]=shiftArr[2][2];shiftArr[2][1]=shiftArr[2][3];shiftArr[2][2]=temp;shiftArr[2][3]=temp2;//the third row circle shift left  2 byte
	temp=shiftArr[3][0];
	shiftArr[3][0]=shiftArr[3][3];shiftArr[3][3]=shiftArr[3][2];shiftArr[3][2]=shiftArr[3][1];shiftArr[3][1]=temp;//the fourth 3bytes
}
#endif
/*
*combine 4 byte to 1 word
*/
int Word(char k1,char k2,char k3,char k4)
{
	return (int)k1<<24|(int )k2<<16|(int)k3<<8|(int)k4;
}
/*
*shiftByte
*direction:"l"for left,"r" for right;
*bytes:shift bytes
*/
int shiftByte(unsigned char direction,unsigned int shiftWord,unsigned int bytes)
{
	int temp;
	if("l"==direction)
	{
		switch(bytes)
		{
			case 1:
			{
				temp=shiftWord>>24;
				shiftWord<<=8;
				shiftWord=shiftWord|temp;
				return shiftWord;
			}
			break;
			case 2:
			{
				temp=shiftWord>>16;
				shiftWord<<=16;
				shiftWord=shiftWord|temp;
				return shiftWord;
			}
			break;
			case 3:
			{
				temp=shiftWord<<24;
				shiftWord>>=8;
				shiftWord=shiftWord|temp;
				return shiftWord;
			}
			break;
		}
	}
	else if("r"==direction)
	{
		switch(bytes)
		{
			case 3:
			{
				temp=shiftWord>>24;
				shiftWord<<=8;
				shiftWord=shiftWord|temp;
				return shiftWord;
			}
			break;
			case 2:
			{
				temp=shiftWord>>16;
				shiftWord<<=16;
				shiftWord=shiftWord|temp;
				return shiftWord;
			}
			break;
			case 1:
			{
				temp=shiftWord<<24;
				shiftWord>>=8;
				shiftWord=shiftWord|temp;
				return shiftWord;
			}
			break;
		}

	}
	else
	{
		printf("connot recognise the argument\n" );
		exit(1);
	}

}

/***************8
*MixColumn transformation
*
************/
int MixColumn(unsigned int transWord)
{
	unsigned char byte0=(transWord>>24)&0xff;//the first byte of transWord
	unsigned char byte1=(transWord>>16)&0xff;//the second byte 
	unsigned char byte2=(transWord>>8)&0xff;//the third byte
	unsigned char byte3=transWord&0xff;

	unsigned char b0 = mul(byte0, 2) ^ mul(byte1, 3) ^ byte2 ^ byte3; //  
    unsigned char b1 = byte0 ^ mul(byte1, 2) ^ mul(byte2, 3) ^ byte3;//  
    unsigned char b2 = byte0 ^ byte1 ^ mul(byte2, 2) ^ mul(byte3, 3);  
    unsigned char b3 = mul(byte0, 3) ^ byte1 ^ byte2 ^ mul(byte3, 2);  
    return word(b0,b1,b2,b3);
    //rebuild the transformed word ,b0+b1+b2+b3
}

/*
*Inverse MixColumn transformation
*
*/
int invMixColumn(int invWord)
{
	unsigned char byte0 = (invWord >> 24) & 0xFF;
	unsigned char byte1 = (invWord >> 16) & 0xFF;
	unsigned char byte2 = (invWord >> 8) & 0xFF;
	unsigned char byte3 = invWord & 0xFF;
	unsigned char b0 = mul(byte0, 0x0E) ^ mul(byte1, 0x0B) ^ mul(byte2, 0x0D) ^ mul(byte3, 0x09);
	unsigned char b1 = mul(byte0, 0x09) ^ mul(byte1, 0x0E) ^ mul(byte2, 0x0B) ^ mul(byte3, 0x0D);
	unsigned char b2 = mul(byte0, 0x0D) ^ mul(byte1, 0x09) ^ mul(byte2, 0x0E) ^ mul(byte3, 0x0B);
	unsigned char b3 = mul(byte0, 0x0B) ^ mul(byte1, 0x0D) ^ mul(byte2, 0x09) ^ mul(byte3, 0x0E);
	return word(b0,b1,b2,b3);
}

/** 
 *  expand the cipher key ,in fact,4 word to 44 word used for 11 round  key add
 */   
void KeyExpansion(unsigned char key[4*Nk],unsigned int w[4*(Nr+1)])  
{  
    unsigned int temp;  
    unsigned int i = 0;  
    // w[]的前4个就是输入的key  
    while(i < Nk)   
    {  
        w[i] = Word(key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]);  
        ++i;  
    }  
  
    i = Nk;  
  
    while(i < 4*(Nr+1))  
    {  
        temp = w[i-1]; // 记录前一个word  
        if(i % Nk == 0)  
            w[i] = w[i-Nk] ^ SubWord(shiftWord(temp)) ^ Rcon[i/Nk-1];  
        else   
            w[i] = w[i-Nk] ^ temp;  
        ++i;  
    }  
}  

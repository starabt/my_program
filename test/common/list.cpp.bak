/***********************************************************
    Copyright (C), 2016,Guang Zhou Tongda auto electric Co., Ltd.
    File name:      send_list.cc
    Author:         Gao Zhigang
    Version:        1.0
    Date:           2016/07/21
    Description:    recv队列类LIST
    History:
        Date            Author          Version       Modification
*************************************************************/
#include "list.h"

//NODE 类
NODE::NODE():
    cmd(0),
    flag(-1),   
    packdata(NULL),
    need_deal(false),
    packdata_len(0), 
    next(NULL)
{
    printf("NODE init.............\n");
    pthread_mutex_init(&pack_lock,NULL);
}

NODE::~NODE()
{
    printf("NODE deinit.............\n");
    pthread_mutex_destroy(&pack_lock); 
}

//LIST 类
LIST::LIST(unsigned int maxcount,unsigned int nodesize):
    Data_list(NULL),
    push(NULL),
    pop(NULL),
    node_count(0)
{
    pthread_mutex_init(&push_index_mutex, NULL);
    pthread_mutex_init(&pop_index_mutex, NULL);
    MAX_QUEUE_SIZE = maxcount;
    NODE_SIZE = nodesize;
}

LIST::~LIST()
{
    pthread_mutex_destroy(&push_index_mutex);
    pthread_mutex_destroy(&pop_index_mutex);  
}

/*************************************************
    Function:       init_queue()
    Description:    环形链表初始化
*************************************************/
int LIST::init_list()
{
    if(MAX_QUEUE_SIZE==0 || NODE_SIZE==0)
    {
        printf("init_list error:queue_size or node_size is zero\n");
        return -1;
    }
    //
    Data_list =  new NODE[MAX_QUEUE_SIZE];
    if(NULL == Data_list)
    {
        printf("init_list malloc Data_list failed\n");
        return -1;
    }
    for(unsigned int i=0;i<MAX_QUEUE_SIZE;i++)
    {
        (Data_list+i)->packdata = (char*)malloc(NODE_SIZE);
        if((Data_list+i)->packdata == NULL)
        {
            printf("init_list malloc node packdata [%d] failed\n",i);
            delete[] Data_list;
            return -1;
        }
        (Data_list+i)->need_deal = false;
        (Data_list+i)->cmd=0x00;
        (Data_list+i)->flag=i;
        (Data_list+i)->next = Data_list+i+1;
    }
    push = Data_list;
    pop = Data_list;
    
    (Data_list+MAX_QUEUE_SIZE-1)->next = Data_list;   //a loop list
    (Data_list+MAX_QUEUE_SIZE-1)->need_deal = false;
    (Data_list+MAX_QUEUE_SIZE-1)->cmd=0x00;
    (Data_list+MAX_QUEUE_SIZE-1)->flag=MAX_QUEUE_SIZE-1;

    pthread_mutex_lock(&node_count_lock.cont_lock);     //lock cont_lock
    node_count = 0;
    pthread_mutex_unlock(&node_count_lock.cont_lock);   //unlock cont_lock
    return 0;
}
int LIST::deinit_list()
{
    if(Data_list == NULL)
    {
        printf("deinit_list error:Data_list is NULL\n");
        return -1;
    } 
    if(MAX_QUEUE_SIZE==0 || NODE_SIZE==0)
    {
        printf("deinit_list error:queue_size or node_size is zero\n");
        delete[] Data_list;
        return -1;
    }
    for(unsigned int i=0;i<MAX_QUEUE_SIZE;i++)
    {

        if((Data_list+i)->packdata != NULL)
        {
            free((Data_list+i)->packdata);
            (Data_list+i)->packdata =NULL;
        }

    }
    delete[] Data_list;
    return 0;
}
/*************************************************
    Function:       push_queue()
    Description:    添加一个数据包到队列中,成功返回 true,失败返回false
*************************************************/
bool LIST::push_queue(unsigned char* indata, unsigned int len,unsigned char cmdflag)
{
    printf("push MAX_QUEUE_SIZE::::::::::::::::::%d\n", MAX_QUEUE_SIZE);
    if(push == NULL)
    {
        printf("list push is NULL\n");
        return false;
    }
    unsigned int list_len = MAX_QUEUE_SIZE;
    for(unsigned int i=0;i< list_len;i++)
    {
        int ret=pthread_mutex_lock(&push->pack_lock);
        if(ret==0) //上锁互斥锁
            ;
        else
        {
            printf("+++++++++++++++++++++++ lock error ++++++++++++++++++++++++ %d \n",ret );
        }
        if(push == NULL)
        {
            printf("in_list is NULL\n" );
            continue;
        }
        if(!push->need_deal)
        {
            if(len  <= NODE_SIZE) //数据长度小于等于一个node数组长度
            {
                if(push->packdata == NULL)
                {
                    printf("push->packdata is NULL ............\n");
                    continue;
                }
                memset(push->packdata,0,NODE_SIZE);
                memcpy(push->packdata, indata ,len);
                push->packdata_len = len;
                if(cmdflag!=0)
                	push->cmd=cmdflag;
                push->need_deal = true;
                pthread_mutex_unlock(&(push->pack_lock));  ////解锁互斥锁 
                push = push->next;

                //此时通知发送线程
                pthread_mutex_lock(&node_count_lock.cont_lock);     //lock cont_lock
                if(node_count++ == 0)
                {
                    pthread_cond_signal(&node_count_lock.cond);   //send signal to pthread_mutex_timewait()
                }
                pthread_mutex_unlock(&node_count_lock.cont_lock);   //unlock cont_lock
                printf("push success................\n");
                return true;
            }
            else  //数据长度大于node数组长度
            {
                printf("len:::::::::%d,NODE_SIZE::::::::%d\n",len,NODE_SIZE );
                /*********************
                *gzg:暂时不处理，丢弃，理论上应该进行分包处理
                *********************/
                pthread_mutex_unlock(&push->pack_lock);  //解锁互斥锁 
                return false;  
            }   
        }
        pthread_mutex_unlock(&push->pack_lock);  //解锁互斥锁
        push = push->next;
    }

    printf("net recv 队列已满，请稍后。。。\n");
    return false;
}

/*************************************************
    Function:       pop_queue()
    Description:    从队列中取出一个数据包,成功返回pop_data,失败返回NULL
***************************************l**********/
bool LIST::pop_queue(unsigned char *outdata,unsigned int &outdatalen,unsigned char *cmdFLAG)
{
    printf("pop MAX_QUEUE_SIZE::::::::::::::::::%d\n", MAX_QUEUE_SIZE);

    if(pop == NULL)
    {
        printf("list pop is NULL\n");
        return false;
    }
    pthread_mutex_lock(&node_count_lock.cont_lock);      //lock cont_lock
    // printf("into pop_queue //cont_lock lock \n");
    timespec timeout;
    timeval now;
    long timeout_ms = 1000; // wait time 50ms
    gettimeofday(&now, NULL);
    long nsec = now.tv_usec * 1000 + (timeout_ms % 1000) * 1000000;
    timeout.tv_sec=now.tv_sec + nsec / 1000000000 + timeout_ms / 1000;
    timeout.tv_nsec=nsec % 1000000000; 
    if(node_count==0)
    {
        pthread_cond_timedwait(&node_count_lock.cond, &node_count_lock.cont_lock,&timeout); 
    }
        
    if(node_count == 0)
    {
        printf("node_count is zero..................\n");
        pthread_mutex_unlock(&node_count_lock.cont_lock);    //unlock cont_lock
        return false;
    }
    pthread_mutex_lock(&pop->pack_lock);    //lock pack_lock
    if(pop->need_deal)
    {
        outdatalen = pop->packdata_len;
        memcpy(outdata,pop->packdata,pop->packdata_len
        pop->need_deal = false;
        if(cmdFLAG!=NULL)
        	*cmdFLAG=pop->cmd;
        if(node_count!=0)
            node_count--;   
        pthread_mutex_unlock(&pop->pack_lock);      //unlock pack_lock
        pthread_mutex_unlock(&node_count_lock.cont_lock);    //unlock cont_lock
        pop = pop->next;
        printf("pop success\n");
        return true;
    }
    pthread_mutex_unlock(&pop->pack_lock);      //unlock pack_lock
    pthread_mutex_unlock(&node_count_lock.cont_lock);    //unlock cont_lock
    pop = pop->next;
    printf("anyway pop failed\n");
    return false;
}
bool LIST::is_empty()
{
    return node_count<=0;
}
#ifndef _LIST_H_
#define _LIST_H_

#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include <stdint.h>
#include <sys/time.h>
#include <time.h>
#include <malloc.h>
#include "mutex.h"
//定义一个结构体类型，标识队列中的一个node
class NODE{
public:
    NODE();//默认1024字节，可通过初始化时传参改变
    virtual ~NODE();

    pthread_mutex_t pack_lock;          //互斥锁,因为push和pop都要修改need_deal标识，所以这里需要加一个互斥锁
    unsigned char cmd;
    int flag; 
    char *packdata;                     //存放要发送数据
    bool need_deal;                     //node中是否需要处理
    int packdata_len;                   //存放在node中的数据长度
    NODE *next;
};


class LIST{
public:
    LIST(unsigned int maxcount=10,unsigned int nodesize=1024);
    virtual ~LIST();
    unsigned int MAX_QUEUE_SIZE;
    unsigned int NODE_SIZE;
    NODE *Data_list;   //MAX_QUEUE_SIZE个NODE的队列 //这个不应该放在这里 add by tony 2017-02-18
    NODE *push;       //入队列指针
    NODE *pop;        //出队列指针
    COND_LOCK node_count_lock; //条件锁
    pthread_mutex_t push_index_mutex;
    pthread_mutex_t pop_index_mutex;

   //清零发送队列的数据，初始化数据包互斥锁
    int init_list(); 
    int deinit_list();
    bool push_queue(unsigned char* indata, unsigned int len,unsigned char cmdflag=0);
    bool pop_queue(unsigned char *outdata,unsigned int &outdatalen,unsigned char *cmdFLAG=NULL);
    bool is_empty();
protected:
    int node_count;         //记录有数据的node个数
};

#endif
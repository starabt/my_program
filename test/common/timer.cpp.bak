#include "timer.h"
int timer_stop(timer_t timer_id)
{
	// printf("timer_id:%d\n",timer_id );
	if(timer_delete(timer_id) == -1)	
	{
		if(errno == EINVAL)
		{
			printf("this posix timer is invalid\n");
		}
		return -1;
	}
	return 0;
}
int timer_start(TIMER_INFO &timer_info,timer_callback timer_cb_func,int sigId)
{
	struct sigevent se;
	memset(&se,0,sizeof(se));
	se.sigev_value.sival_int = sigId; //this can be passed into callback
	se.sigev_notify = 	SIGEV_THREAD; 	//The thread notifying way -- dispatch a new thread.
	se.sigev_notify_function = timer_cb_func; // The thread address

	if(timer_create(CLOCK_MONOTONIC,&se,&timer_info.timerId) == -1)
	{
		perror("fail to timer_create");
		return -1;
	}
	// printf("timer_info.timerId:%d\n",timer_info.timerId );
	if(timer_settime(timer_info.timerId,0,&timer_info.it,NULL) == -1)
	{
		perror("fail to timer_settime");
		timer_stop(timer_info.timerId);
		return -1;
	}
	return 0;
}

/*demo*/

#if 0
static TIMER_INFO timerInfo;
void timer_cb(union sigval sigV)
{
	timer_stop(timerInfo.timerId);
	printf("timer_cb function! %d\n", sigV.sival_int);
	return;
}
int main()
{
	
	timerInfo.it.it_interval.tv_sec = 0;
	timerInfo.it.it_interval.tv_nsec = 0;
	timerInfo.it.it_value.tv_sec = 60;
	timerInfo.it.it_value.tv_nsec = 0;
	timer_start(timerInfo,timer_cb,111);
	printf("wating timer.......\n");
	sleep(timerInfo.it.it_value.tv_sec+10);
	printf("now is to exit timer exe\n");
	// timer_stop(timerInfo.timerId);
	return 0;

}
#endif